/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Flags for optional output
// 0 : only write final meshes
// 1 : write intermediate meshes
// 2 : write volScalarField with cellLevel for postprocessing
// 4 : write current intersections as .obj files
debug 0;

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-7;

// Meshing steps
castellatedMesh false;
snap            true;
addLayers       false;

geometry
{
    geometry_fluid_static.stl
    {
        type triSurfaceMesh;
        name geometry_fluid_static;
    }

    geometry_wafer.stl
    {
        type triSurfaceMesh;
        name geometry_wafer;
    }
};

castellatedMeshControls
{
    // While refining maximum number of cells per processor. This is basically
    // the number of cells that fit on a processor. If you choose this too small
    // it will do just more refinement iterations to obtain a similar mesh.
    maxLocalCells 1000000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 6000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 50;

    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 1;

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface.
    // The .eMesh file can be obtained with the surfaceFeatureExtract utility.
    // The classic input from command line is:
    // > surfaceFeatureExtract -includedAngle 150 \
    //   constant/triSurface/mesh.stl mesh
    features
    (
        {file "geometry_fluid_static.eMesh"; level 2;}
        {file "geometry_wafer.eMesh"; level 2;}
    );

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level.
    refinementSurfaces
    {
        geometry_fluid_static
        {
            level (2 2);

            cellZone fluid_static;
            cellZoneInside inside;

            faceZone fluid_static;
            faceType internal;
        }

        geometry_wafer
        {
            level (2 2);

            cellZone wafer;
            cellZoneInside inside;

            faceZone wafer;
            faceType internal;
        }
    }

    // Resolve sharp angles
    // Applies maximum level of refinement to cells that can see intersections
    // whose angle exceeds this
    resolveFeatureAngle 30;

    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~
    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    // wanted refinement level. The distances need to be specified in
    // descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    // cells inside the surface get refined up to the level. The surface
    // needs to be closed for this to be possible.
    // - outside. Same but cells outside.
    refinementRegions
    {
    }

    // Mesh selection
    // ~~~~~~~~~~~~~~
    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (0.0 0.0 0.1);

    allowFreeStandingZoneFaces no;
}

#include "snappyHexMeshDict.include.meshQualityControls"
#include "snappyHexMeshDict.include.snapControls"
#include "snappyHexMeshDict.include.addLayersControls"

// ************************************************************************* //
