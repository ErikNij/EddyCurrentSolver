/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     3.1                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Flags for optional output
// 0 : only write final meshes
// 1 : write intermediate meshes
// 2 : write volScalarField with cellLevel for postprocessing
// 4 : write current intersections as .obj files
debug 0;

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;

// Meshing steps
castellatedMesh true;
snap            true;
addLayers       false;

geometry
{
    geometry_fluid_dynamic.stl
    {
        type triSurfaceMesh;
        name geometry_fluid_dynamic;
    }

    geometry_fluid_static.stl
    {
        type triSurfaceMesh;
        name geometry_fluid_static;
    }

    geometry_wafer.stl
    {
        type triSurfaceMesh;
        name geometry_wafer;
    }

    geometry_substrate.stl
    {
        type triSurfaceMesh;
        name geometry_substrate;
    }

    geometry_frame.stl
    {
        type triSurfaceMesh;
        name geometry_frame;
    }

    geometry_free.stl
    {
        type triSurfaceMesh;
        name geometry_free;
    }

    geometry_coil0.stl
    {
        type triSurfaceMesh;
        name geometry_coil0;
    }

    geometry_coil1.stl
    {
        type triSurfaceMesh;
        name geometry_coil1;
    }

    geometry_coil2.stl
    {
        type triSurfaceMesh;
        name geometry_coil2;
    }
};

castellatedMeshControls
{
    // While refining maximum number of cells per processor. This is basically
    // the number of cells that fit on a processor. If you choose this too small
    // it will do just more refinement iterations to obtain a similar mesh.
    maxLocalCells 1000000;

    // Overall cell limit (approximately). Refinement will stop immediately
    // upon reaching this number so a refinement level might not complete.
    // Note that this is the number of cells before removing the part which
    // is not 'visible' from the keepPoint. The final number of cells might
    // actually be a lot less.
    maxGlobalCells 6000000;

    // The surface refinement loop might spend lots of iterations refining just a
    // few cells. This setting will cause refinement to stop if <= minimumRefine
    // are selected for refinement. Note: it will at least do one iteration
    // (unless the number of cells to refine is 0)
    minRefinementCells 0;

    // Number of buffer layers between different levels.
    // 1 means normal 2:1 refinement restriction, larger means slower
    // refinement.
    nCellsBetweenLevels 2;

    // Specifies a level for any cell intersected by its edges.
    // This is a featureEdgeMesh, read from constant/triSurface.
    // The .eMesh file can be obtained with the surfaceFeatureExtract utility.
    // The classic input from command line is:
    // > surfaceFeatureExtract -includedAngle 150 \
    //   constant/triSurface/mesh.stl mesh
    features
    (
        // Can be done implicitely with "implicitFeatureSnap" in snapControls{}
        // for OpenFOAM 2.2.0 or higher
//         {file "geometry_fluid.eMesh"; level 3;}
        {file "geometry_fluid_dynamic.eMesh"; level 3;}
        {file "geometry_fluid_static.eMesh"; level 4;}
        {file "geometry_wafer.eMesh"; level 4;}
        {file "geometry_substrate.eMesh"; level 3;}
        {file "geometry_frame.eMesh"; level 3;}
//         {file "geometry_free.eMesh"; level 3;}
        {file "geometry_coil0.eMesh"; level 3;}
        {file "geometry_coil1.eMesh"; level 3;}
        {file "geometry_coil2.eMesh"; level 3;}

    );

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level.
    refinementSurfaces
    {
        geometry_fluid_dynamic
        {
            level (3 3);

            cellZone geometry_fluid_dynamic;
            cellZoneInside inside;

            faceZone fluid_dynamic;
            faceType internal;
        }

        geometry_fluid_static
        {
            level (3 4);

            cellZone geometry_fluid_static;
            cellZoneInside inside;

            faceZone fluid_static;
            faceType internal;
        }

        geometry_wafer
        {
            level (3 4);

            cellZone geometry_wafer;
            cellZoneInside inside;

            faceZone wafer;
            faceType internal;
        }

        geometry_substrate
        {
            level (3 3);

            cellZone geometry_substrate;
            cellZoneInside inside;

            faceZone substrate;
            faceType internal;
        }

        geometry_frame
        {
            level (3 3);

            cellZone geometry_frame;
            cellZoneInside inside;

            faceZone frame;
            faceType internal;
        }

        geometry_free
        {
            level (2 2);

            cellZone geometry_free;
            cellZoneInside inside;

            faceZone free;
            faceType internal;
        }

        geometry_coil0
        {
            level (3 3);

            cellZone geometry_coil0;
            cellZoneInside inside;

            faceZone coil0;
            faceType internal;
        }

        geometry_coil1
        {
            level (3 3);

            cellZone geometry_coil1;
            cellZoneInside inside;

            faceZone coil1;
            faceType internal;
        }

        geometry_coil2
        {
            level (3 3);

            cellZone geometry_coil2;
            cellZoneInside inside;

            faceZone coil2;
            faceType internal;
        }
    }

    // Resolve sharp angles
    // Applies maximum level of refinement to cells that can see intersections
    // whose angle exceeds this
    resolveFeatureAngle 30;

    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~
    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    // wanted refinement level. The distances need to be specified in
    // descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    // cells inside the surface get refined up to the level. The surface
    // needs to be closed for this to be possible.
    // - outside. Same but cells outside.
    refinementRegions
    {

        geometry_fluid_dynamic
        {
            mode inside;
            levels ((1e-15 3));
        }

        geometry_fluid_static
        {
            mode inside;
            levels ((1e-15 3));
        }

        geometry_wafer
        {
            mode inside;
            levels ((1e-15 3));
        }

        geometry_substrate
        {
            mode inside;
            levels ((1e-15 3));
        }

        geometry_frame
        {
            mode inside;
            levels ((1e-15 3));
        }

//         geometry_free
//         {
//             mode inside;
//             levels ((1e-15 1));
//         }

        geometry_coil0
        {
//             mode inside;
//             levels ((1e-15 3));

            mode distance;
            levels ((0.01 3) (0.03 2));
        }

        geometry_coil1
        {
//             mode inside;
//             levels ((1e-15 3));

            mode distance;
            levels ((0.01 3) (0.03 2));
        }

        geometry_coil2
        {
//             mode inside;
//             levels ((1e-15 3));

            mode distance;
            levels ((0.01 3) (0.03 2));
        }
    }

    // Mesh selection
    // ~~~~~~~~~~~~~~
    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (0.0 0.0 0.1);

    allowFreeStandingZoneFaces no;
}

meshQualityControls
{
    //- Maximum non-orthogonality allowed. Set to 180 to disable.
    maxNonOrtho 65;

    //- Max skewness allowed. Set to <0 to disable.
    maxBoundarySkewness 20;
    maxInternalSkewness 4;

    //- Max concaveness allowed. Is angle (in degrees) below which concavity
    //  is allowed. 0 is straight face, <0 would be convex face.
    //  Set to 180 to disable.
    maxConcave 80;

    //- Minimum pyramid volume. Is absolute volume of cell pyramid.
    //  Set to very negative number (e.g. -1E30) to disable.
    minVol 1e-13;

    //- Minimum quality of the tet formed by the face-centre
    //  and variable base point minimum decomposition triangles and
    //  the cell centre.  Set to very negative number (e.g. -1E30) to
    //  disable.
    //     <0 = inside out tet,
    //      0 = flat tet
    //      1 = regular tet
//     minTetQuality 1e-15;
    minTetQuality 1e-4;

    //- Minimum face area. Set to <0 to disable.
    minArea -1;

    //- Minimum face twist. Set to <-1 to disable. dot product of face normal
    //- and face centre triangles normal
    minTwist 0.02;

    //- minimum normalised cell determinant
    //- 1 = hex, <= 0 = folded or flattened illegal cell
//     minDeterminant 0.001;
    minDeterminant 0.1;

    //- minFaceWeight (0 -> 0.5)
    minFaceWeight 0.02;

    //- minVolRatio (0 -> 1)
    minVolRatio 0.01;

    //must be >0 for Fluent compatibility
    minTriangleTwist -1;


    //- if >0 : preserve cells with all points on the surface if the
    //  resulting volume after snapping (by approximation) is larger than
    //  minVolCollapseRatio times old volume (i.e. not collapsed to flat cell).
    //  If <0 : delete always.
//     minVolCollapseRatio 0.1;

    // Advanced

    //- Number of error distribution iterations
    nSmoothScale 4;

    //- amount to scale back displacement at error points
    errorReduction 0.75;
}

snapControls
{
    //- Number of patch smoothing iterations before finding correspondence
    //  to surface
//     nSmoothPatch 8;
    nSmoothPatch 3;

    //- Relative distance for points to be attracted by surface feature point
    //  or edge. True distance is this factor times local
    //  maximum edge length.
//     tolerance 1.0;
    tolerance 4.0;

    //- Number of mesh displacement relaxation iterations.
    nSolveIter 30;
//     nSolveIter 100;
//     nSolveIter 200;

    //- Maximum number of snapping relaxation iterations. Should stop
    //  before upon reaching a correct mesh.
    nRelaxIter 5;

    //- Highly experimental and wip: number of feature edge snapping
    //  iterations. Leave out altogether to disable.
    nFeatureSnapIter 10;

        //- Detect (geometric only) features by sampling the surface
        //  (default=false).
        implicitFeatureSnap false;

        //- Use castellatedMeshControls::features (default = true)
        explicitFeatureSnap true;

        //- Detect points on multiple surfaces (only for explicitFeatureSnap)
//         multiRegionFeatureSnap true;
        multiRegionFeatureSnap false;
}

addLayersControls
{
    relativeSizes true;

    // Per final patch (so not geometry!) the layer information
    layers
    {
        dummy
        {
            nSurfaceLayers 1;
        }
    }

    // Expansion factor for layer mesh
    expansionRatio 1.0;

    // Wanted thickness of final added cell layer. If multiple layers
    // is the thickness of the layer furthest away from the wall.
    // Relative to undistorted size of cell outside layer.
    finalLayerThickness 0.3;

    // Minimum thickness of cell layer. If for any reason layer
    // cannot be above minThickness do not add layer.
    // Relative to undistorted size of cell outside layer.
    minThickness 0.1;

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 17x! (didn't do anything in 17x)
    nGrow 1;

    // Advanced settings

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 60;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 5;

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 1;

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 17x! 90 degrees corresponds to 130 in 17x.
    minMedianAxisAngle 90;

    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;

    // Overall max number of layer addition iterations. The mesher will exit
    // if it reaches this number of iterations; possibly with an illegal
    // mesh.
    nLayerIter 50;
}

// ************************************************************************* //
