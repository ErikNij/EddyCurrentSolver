/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  | For copyright notice see file Copyright         |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


convertToMeters 0.001;

vertices
(
    ( 1.0 5.0 0.566037735849 ) // # 0
    ( 1.0 -5.0 0.566037735849 ) // # 1001
    ( 19.4333333333 5.0 11.0 ) // # 1
    ( 19.4333333333 -5.0 11.0 ) // # 1002
    ( 15.3111111111 5.0 15.3333333333 ) // # 2
    ( 15.3111111111 -5.0 15.3333333333 ) // # 1003
    ( 1.0 5.0 11.2830188679 ) // # 3
    ( 1.0 -5.0 11.2830188679 ) // # 1004
    ( 38.8666666667 5.0 22.0 ) // # 4
    ( 38.8666666667 -5.0 22.0 ) // # 1005
    ( 19.4333333333 5.0 22.0 ) // # 5
    ( 19.4333333333 -5.0 22.0 ) // # 1006
    ( 1.0 5.0 22.0 ) // # 6
    ( 1.0 -5.0 22.0 ) // # 1007
    ( 53.0 5.0 30.0 ) // # 7
    ( 53.0 -5.0 30.0 ) // # 1008
    ( 53.0 5.0 70.0 ) // # 8
    ( 53.0 -5.0 70.0 ) // # 1009
    ( 38.8666666667 5.0 70.0 ) // # 9
    ( 38.8666666667 -5.0 70.0 ) // # 1010
    ( 19.4333333333 5.0 70.0 ) // # 10
    ( 19.4333333333 -5.0 70.0 ) // # 1011
    ( 1.0 5.0 70.0 ) // # 11
    ( 1.0 -5.0 70.0 ) // # 1012
    ( 1.0 5.0 -7.43396226415 ) // # 12
    ( 1.0 -5.0 -7.43396226415 ) // # 1013
    ( 22.8628291543 5.0 4.94122404961 ) // # 13
    ( 22.8628291543 -5.0 4.94122404961 ) // # 1014
    ( 42.2961624876 5.0 15.9412240496 ) // # 14
    ( 42.2961624876 -5.0 15.9412240496 ) // # 1015
    ( 62.0 5.0 27.095 ) // # 15
    ( 62.0 -5.0 27.095 ) // # 1016
    ( 62.0 5.0 70.0 ) // # 16
    ( 62.0 -5.0 70.0 ) // # 1017
    ( 1.0 5.0 -34.0 ) // # 17
    ( 1.0 -5.0 -34.0 ) // # 1018
    ( 22.8628291543 5.0 -34.0 ) // # 18
    ( 22.8628291543 -5.0 -34.0 ) // # 1019
    ( 42.2961624876 5.0 -34.0 ) // # 19
    ( 42.2961624876 -5.0 -34.0 ) // # 1020
    ( 62.0 5.0 -34.0 ) // # 20
    ( 62.0 -5.0 -34.0 ) // # 1021
    ( 70.0 5.0 -34.0 ) // # 21
    ( 70.0 -5.0 -34.0 ) // # 1022
    ( 70.0 5.0 27.095 ) // # 22
    ( 70.0 -5.0 27.095 ) // # 1023
    ( 70.0 5.0 70.0 ) // # 23
    ( 70.0 -5.0 70.0 ) // # 1024
    ( 70.0 5.0 142.0 ) // # 24
    ( 70.0 -5.0 142.0 ) // # 1025
    ( 62.0 5.0 142.0 ) // # 25
    ( 62.0 -5.0 142.0 ) // # 1026
    ( 53.0 5.0 142.0 ) // # 26
    ( 53.0 -5.0 142.0 ) // # 1027
    ( 38.8666666667 5.0 142.0 ) // # 27
    ( 38.8666666667 -5.0 142.0 ) // # 1028
    ( 19.4333333333 5.0 142.0 ) // # 28
    ( 19.4333333333 -5.0 142.0 ) // # 1029
    ( 1.0 5.0 142.0 ) // # 29
    ( 1.0 -5.0 142.0 ) // # 1030
    ( 1.0 5.0 -226.0 ) // # 30
    ( 1.0 -5.0 -226.0 ) // # 1031
    ( 22.8628291543 5.0 -226.0 ) // # 31
    ( 22.8628291543 -5.0 -226.0 ) // # 1032
    ( 42.2961624876 5.0 -226.0 ) // # 32
    ( 42.2961624876 -5.0 -226.0 ) // # 1033
    ( 62.0 5.0 -226.0 ) // # 33
    ( 62.0 -5.0 -226.0 ) // # 1034
    ( 70.0 5.0 -226.0 ) // # 34
    ( 70.0 -5.0 -226.0 ) // # 1035
    ( 280.0 5.0 -226.0 ) // # 35
    ( 280.0 -5.0 -226.0 ) // # 1036
    ( 280.0 5.0 -34.0 ) // # 36
    ( 280.0 -5.0 -34.0 ) // # 1037
    ( 280.0 5.0 27.095 ) // # 37
    ( 280.0 -5.0 27.095 ) // # 1038
    ( 280.0 5.0 70.0 ) // # 38
    ( 280.0 -5.0 70.0 ) // # 1039
    ( 280.0 5.0 142.0 ) // # 39
    ( 280.0 -5.0 142.0 ) // # 1040
    ( 280.0 5.0 334.0 ) // # 40
    ( 280.0 -5.0 334.0 ) // # 1041
    ( 70.0 5.0 334.0 ) // # 41
    ( 70.0 -5.0 334.0 ) // # 1042
    ( 62.0 5.0 334.0 ) // # 42
    ( 62.0 -5.0 334.0 ) // # 1043
    ( 53.0 5.0 334.0 ) // # 43
    ( 53.0 -5.0 334.0 ) // # 1044
    ( 38.8666666667 5.0 334.0 ) // # 44
    ( 38.8666666667 -5.0 334.0 ) // # 1045
    ( 19.4333333333 5.0 334.0 ) // # 45
    ( 19.4333333333 -5.0 334.0 ) // # 1046
    ( 1.0 5.0 334.0 ) // # 46
    ( 1.0 -5.0 334.0 ) // # 1047
);

blocks
(
    hex ( 0 2 4 6 1 3 5 7 ) solid ( 2 2 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 0
    hex ( 2 8 10 4 3 9 11 5 ) solid ( 2 2 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 1
    hex ( 6 4 10 12 7 5 11 13 ) solid ( 2 2 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 2
    hex ( 8 14 16 18 9 15 17 19 ) fluid ( 2 5 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 3
    hex ( 10 8 18 20 11 9 19 21 ) fluid ( 2 5 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 4
    hex ( 12 10 20 22 13 11 21 23 ) fluid ( 2 5 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 5
    hex ( 24 26 2 0 25 27 3 1 ) vessel ( 2 1 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 6
    hex ( 26 28 8 2 27 29 9 3 ) vessel ( 2 1 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 7
    hex ( 28 30 14 8 29 31 15 9 ) vessel ( 2 1 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 8
    hex ( 14 30 32 16 15 31 33 17 ) vessel ( 1 5 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 9
    hex ( 34 36 26 24 35 37 27 25 ) heater ( 2 7 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 10
    hex ( 36 38 28 26 37 39 29 27 ) heater ( 2 7 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 11
    hex ( 38 40 30 28 39 41 31 29 ) heater ( 2 7 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 12
    hex ( 40 42 44 30 41 43 45 31 ) heater ( 1 7 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 13
    hex ( 30 44 46 32 31 45 47 33 ) heater ( 1 5 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 14
    hex ( 32 46 48 50 33 47 49 51 ) heater ( 1 8 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 15
    hex ( 16 32 50 52 17 33 51 53 ) free_internal ( 1 8 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 16
    hex ( 18 16 52 54 19 17 53 55 ) free_internal ( 2 8 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 17
    hex ( 20 18 54 56 21 19 55 57 ) free_internal ( 2 8 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 18
    hex ( 22 20 56 58 23 21 57 59 ) free_internal ( 2 8 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 19
    hex ( 60 62 36 34 61 63 37 35 ) free_external ( 2 20 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 20
    hex ( 62 64 38 36 63 65 39 37 ) free_external ( 2 20 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 21
    hex ( 64 66 40 38 65 67 41 39 ) free_external ( 2 20 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 22
    hex ( 66 68 42 40 67 69 43 41 ) free_external ( 1 20 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 23
    hex ( 68 70 72 42 69 71 73 43 ) free_external ( 21 20 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 24
    hex ( 42 72 74 44 43 73 75 45 ) free_external ( 21 7 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 25
    hex ( 44 74 76 46 45 75 77 47 ) free_external ( 21 5 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 26
    hex ( 46 76 78 48 47 77 79 49 ) free_external ( 21 8 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 27
    hex ( 48 78 80 82 49 79 81 83 ) free_external ( 21 20 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 28
    hex ( 50 48 82 84 51 49 83 85 ) free_external ( 1 20 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 29
    hex ( 52 50 84 86 53 51 85 87 ) free_external ( 1 20 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 30
    hex ( 54 52 86 88 55 53 87 89 ) free_external ( 2 20 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 31
    hex ( 56 54 88 90 57 55 89 91 ) free_external ( 2 20 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 32
    hex ( 58 56 90 92 59 57 91 93 ) free_external ( 2 20 1 ) simpleGrading ( 1.0 1.0 1.0 ) // # 33
);

edges
(
);

boundary
(
    axis
    {
        type patch;
        faces
        (
            ( 0 6 7 1 )
            ( 6 12 13 7 )
            ( 12 22 23 13 )
            ( 24 0 1 25 )
            ( 34 24 25 35 )
            ( 22 58 59 23 )
            ( 60 34 35 61 )
            ( 58 92 93 59 )
        );
    }

    front
    {
        type empty;
        faces
        (
            ( 1 3 5 7 )
            ( 3 9 11 5 )
            ( 7 5 11 13 )
            ( 9 15 17 19 )
            ( 11 9 19 21 )
            ( 13 11 21 23 )
            ( 25 27 3 1 )
            ( 27 29 9 3 )
            ( 29 31 15 9 )
            ( 15 31 33 17 )
            ( 35 37 27 25 )
            ( 37 39 29 27 )
            ( 39 41 31 29 )
            ( 41 43 45 31 )
            ( 31 45 47 33 )
            ( 33 47 49 51 )
            ( 17 33 51 53 )
            ( 19 17 53 55 )
            ( 21 19 55 57 )
            ( 23 21 57 59 )
            ( 61 63 37 35 )
            ( 63 65 39 37 )
            ( 65 67 41 39 )
            ( 67 69 43 41 )
            ( 69 71 73 43 )
            ( 43 73 75 45 )
            ( 45 75 77 47 )
            ( 47 77 79 49 )
            ( 49 79 81 83 )
            ( 51 49 83 85 )
            ( 53 51 85 87 )
            ( 55 53 87 89 )
            ( 57 55 89 91 )
            ( 59 57 91 93 )
        );
    }

    back
    {
        type empty;
        faces
        (
            ( 0 2 4 6 )
            ( 2 8 10 4 )
            ( 6 4 10 12 )
            ( 8 14 16 18 )
            ( 10 8 18 20 )
            ( 12 10 20 22 )
            ( 24 26 2 0 )
            ( 26 28 8 2 )
            ( 28 30 14 8 )
            ( 14 30 32 16 )
            ( 34 36 26 24 )
            ( 36 38 28 26 )
            ( 38 40 30 28 )
            ( 40 42 44 30 )
            ( 30 44 46 32 )
            ( 32 46 48 50 )
            ( 16 32 50 52 )
            ( 18 16 52 54 )
            ( 20 18 54 56 )
            ( 22 20 56 58 )
            ( 60 62 36 34 )
            ( 62 64 38 36 )
            ( 64 66 40 38 )
            ( 66 68 42 40 )
            ( 68 70 72 42 )
            ( 42 72 74 44 )
            ( 44 74 76 46 )
            ( 46 76 78 48 )
            ( 48 78 80 82 )
            ( 50 48 82 84 )
            ( 52 50 84 86 )
            ( 54 52 86 88 )
            ( 56 54 88 90 )
            ( 58 56 90 92 )
        );
    }

    infinity
    {
        type patch;
        faces
        (
            ( 70 72 73 71 )
            ( 72 74 75 73 )
            ( 74 76 77 75 )
            ( 76 78 79 77 )
            ( 78 80 81 79 )
            ( 80 82 83 81 )
            ( 82 84 85 83 )
            ( 84 86 87 85 )
            ( 86 88 89 87 )
            ( 88 90 91 89 )
            ( 90 92 93 91 )
            ( 60 62 63 61 )
            ( 62 64 65 63 )
            ( 64 66 67 65 )
            ( 66 68 69 67 )
            ( 68 70 71 69 )
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //


