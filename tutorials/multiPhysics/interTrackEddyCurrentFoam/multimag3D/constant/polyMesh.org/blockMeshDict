/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  | For copyright notice see file Copyright         |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //


convertToMeters 0.001;

vertices
(
    ( 0.0 0.0 -90.0 ) // # 0
    ( 15.0 0.0 -90.0 ) // # 1
    ( 12.7279220614 12.7279220614 -90.0 ) // # 2
    ( 0.0 15.0 -90.0 ) // # 3
    ( 30.0 0.0 -90.0 ) // # 4
    ( 21.2132034356 21.2132034356 -90.0 ) // # 5
    ( 0.0 30.0 -90.0 ) // # 6
    ( 120.0 0.0 -90.0 ) // # 7
    ( 84.8528137424 84.8528137424 -90.0 ) // # 8
    ( 0.0 120.0 -90.0 ) // # 9
    ( 0.0 0.0 0.0 ) // # 10
    ( 15.0 0.0 0.0 ) // # 11
    ( 12.7279220614 12.7279220614 0.0 ) // # 12
    ( 0.0 15.0 0.0 ) // # 13
    ( 30.0 0.0 0.0 ) // # 14
    ( 21.2132034356 21.2132034356 0.0 ) // # 15
    ( 0.0 30.0 0.0 ) // # 16
    ( 120.0 0.0 0.0 ) // # 17
    ( 84.8528137424 84.8528137424 0.0 ) // # 18
    ( 0.0 120.0 0.0 ) // # 19
    ( 0.0 0.0 30.0 ) // # 20
    ( 15.0 0.0 30.0 ) // # 21
    ( 12.7279220614 12.7279220614 30.0 ) // # 22
    ( 0.0 15.0 30.0 ) // # 23
    ( 30.0 0.0 30.0 ) // # 24
    ( 21.2132034356 21.2132034356 30.0 ) // # 25
    ( 0.0 30.0 30.0 ) // # 26
    ( 120.0 0.0 30.0 ) // # 27
    ( 84.8528137424 84.8528137424 30.0 ) // # 28
    ( 0.0 120.0 30.0 ) // # 29
    ( 0.0 0.0 60.0 ) // # 30
    ( 15.0 0.0 60.0 ) // # 31
    ( 12.7279220614 12.7279220614 60.0 ) // # 32
    ( 0.0 15.0 60.0 ) // # 33
    ( 30.0 0.0 60.0 ) // # 34
    ( 21.2132034356 21.2132034356 60.0 ) // # 35
    ( 0.0 30.0 60.0 ) // # 36
    ( 120.0 0.0 60.0 ) // # 37
    ( 84.8528137424 84.8528137424 60.0 ) // # 38
    ( 0.0 120.0 60.0 ) // # 39
    ( 0.0 0.0 150.0 ) // # 40
    ( 15.0 0.0 150.0 ) // # 41
    ( 12.7279220614 12.7279220614 150.0 ) // # 42
    ( 0.0 15.0 150.0 ) // # 43
    ( 30.0 0.0 150.0 ) // # 44
    ( 21.2132034356 21.2132034356 150.0 ) // # 45
    ( 0.0 30.0 150.0 ) // # 46
    ( 120.0 0.0 150.0 ) // # 47
    ( 84.8528137424 84.8528137424 150.0 ) // # 48
    ( 0.0 120.0 150.0 ) // # 49
);

blocks
(
    hex ( 0 1 2 3 10 11 12 13 ) core ( 12 12 35 ) simpleGrading ( 1.0 1.0 0.111111111111 ) // # 0
    hex ( 1 4 5 2 11 14 15 12 ) core ( 15 12 35 ) simpleGrading ( 0.5 1.0 0.111111111111 ) // # 1
    hex ( 3 2 5 6 13 12 15 16 ) core ( 12 15 35 ) simpleGrading ( 1.0 0.5 0.111111111111 ) // # 2
    hex ( 4 7 8 5 14 17 18 15 ) annulus ( 35 12 35 ) simpleGrading ( 9.0 1.0 0.111111111111 ) // # 3
    hex ( 6 5 8 9 16 15 18 19 ) annulus ( 12 35 35 ) simpleGrading ( 1.0 9.0 0.111111111111 ) // # 4
    hex ( 10 11 12 13 20 21 22 23 ) ( 12 12 30 ) simpleGrading ( 1.0 1.0 2.0 ) // # 10
    hex ( 11 14 15 12 21 24 25 22 ) ( 15 12 30 ) simpleGrading ( 0.5 1.0 2.0 ) // # 11
    hex ( 13 12 15 16 23 22 25 26 ) ( 12 15 30 ) simpleGrading ( 1.0 0.5 2.0 ) // # 12
    hex ( 14 17 18 15 24 27 28 25 ) ( 35 12 30 ) simpleGrading ( 9.0 1.0 2.0 ) // # 13
    hex ( 16 15 18 19 26 25 28 29 ) ( 12 35 30 ) simpleGrading ( 1.0 9.0 2.0 ) // # 14
    hex ( 20 21 22 23 30 31 32 33 ) ( 12 12 30 ) simpleGrading ( 1.0 1.0 0.5 ) // # 20
    hex ( 21 24 25 22 31 34 35 32 ) ( 15 12 30 ) simpleGrading ( 0.5 1.0 0.5 ) // # 21
    hex ( 23 22 25 26 33 32 35 36 ) ( 12 15 30 ) simpleGrading ( 1.0 0.5 0.5 ) // # 22
    hex ( 24 27 28 25 34 37 38 35 ) ( 35 12 30 ) simpleGrading ( 9.0 1.0 0.5 ) // # 23
    hex ( 26 25 28 29 36 35 38 39 ) ( 12 35 30 ) simpleGrading ( 1.0 9.0 0.5 ) // # 24
    hex ( 30 31 32 33 40 41 42 43 ) ( 12 12 35 ) simpleGrading ( 1.0 1.0 9.0 ) // # 30
    hex ( 31 34 35 32 41 44 45 42 ) ( 15 12 35 ) simpleGrading ( 0.5 1.0 9.0 ) // # 31
    hex ( 33 32 35 36 43 42 45 46 ) ( 12 15 35 ) simpleGrading ( 1.0 0.5 9.0 ) // # 32
    hex ( 34 37 38 35 44 47 48 45 ) ( 35 12 35 ) simpleGrading ( 9.0 1.0 9.0 ) // # 33
    hex ( 36 35 38 39 46 45 48 49 ) ( 12 35 35 ) simpleGrading ( 1.0 9.0 9.0 ) // # 34
);

edges
(
    arc 4 5 ( 0.0 30.0 -90.0 )
    arc 6 5 ( 30.0 0.0 -90.0 )
    arc 14 15 ( 0.0 30.0 0.0 )
    arc 16 15 ( 30.0 0.0 0.0 )
    arc 24 25 ( 0.0 30.0 30.0 )
    arc 26 25 ( 30.0 0.0 30.0 )
    arc 34 35 ( 0.0 30.0 60.0 )
    arc 36 35 ( 30.0 0.0 60.0 )
    arc 44 45 ( 0.0 30.0 150.0 )
    arc 46 45 ( 30.0 0.0 150.0 )
    arc 7 8 ( 0.0 120.0 -90.0 )
    arc 9 8 ( 120.0 0.0 -90.0 )
    arc 17 18 ( 0.0 120.0 0.0 )
    arc 19 18 ( 120.0 0.0 0.0 )
    arc 27 28 ( 0.0 120.0 30.0 )
    arc 29 28 ( 120.0 0.0 30.0 )
    arc 37 38 ( 0.0 120.0 60.0 )
    arc 39 38 ( 120.0 0.0 60.0 )
    arc 47 48 ( 0.0 120.0 150.0 )
    arc 49 48 ( 120.0 0.0 150.0 )
);

boundary
(
    mirror_x
    {
        type patch;
        faces
        (
            ( 0 3 13 10 )
            ( 3 6 16 13 )
            ( 6 9 19 16 )
            ( 10 13 23 20 )
            ( 13 16 26 23 )
            ( 16 19 29 26 )
            ( 20 23 33 30 )
            ( 23 26 36 33 )
            ( 26 29 39 36 )
            ( 30 33 43 40 )
            ( 33 36 46 43 )
            ( 36 39 49 46 )
        );
    }

    mirror_y
    {
        type patch;
        faces
        (
            ( 0 1 11 10 )
            ( 1 4 14 11 )
            ( 4 7 17 14 )
            ( 10 11 21 20 )
            ( 11 14 24 21 )
            ( 14 17 27 24 )
            ( 20 21 31 30 )
            ( 21 24 34 31 )
            ( 24 27 37 34 )
            ( 30 31 41 40 )
            ( 31 34 44 41 )
            ( 34 37 47 44 )
        );
    }

    infinity
    {
        type patch;
        faces
        (
            ( 0 1 2 3 )
            ( 1 4 5 2 )
            ( 3 2 5 6 )
            ( 4 7 8 5 )
            ( 6 5 8 9 )
            ( 40 41 42 43 )
            ( 41 44 45 42 )
            ( 43 42 45 46 )
            ( 44 47 48 45 )
            ( 46 45 48 49 )
            ( 7 8 18 17 )
            ( 8 9 19 18 )
            ( 17 18 28 27 )
            ( 18 19 29 28 )
            ( 27 28 38 37 )
            ( 28 29 39 38 )
            ( 37 38 48 47 )
            ( 38 39 49 48 )
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //


