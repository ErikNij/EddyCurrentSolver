#!/bin/bash

# Source tutorial clean functions
. $WM_PROJECT_DIR/bin/tools/CleanFunctions

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Get application from controlDict
application=$(grep 'application' system/controlDict | sed 's/^\s*application\s*//g' | sed 's/;$//g');

# Cleanup
cleanCase
cleanFaMesh

# Fix bug in foam cleanFaMesh (using bash syntax with #!/bin/sh)
rm -rf constant/faMesh/faBoundary* 2>/dev/null
rm -rf constant/faMesh/faceLabels* 2>/dev/null

# Remove polyMesh boundary description
rm -rf constant/polyMesh/boundary 2>/dev/null

# Remove polyMesh and faMesh
rm -rf 'constant/polyMesh' > /dev/null 2>&1
mkdir 'constant/polyMesh' > /dev/null 2>&1
rm -rf 'constant/faMesh' > /dev/null 2>&1
mkdir 'constant/faMesh' > /dev/null 2>&1

find -name *Map -delete > /dev/null 2>&1
find -name *Map.gz -delete > /dev/null 2>&1
find -name *Addressing -delete > /dev/null 2>&1
find -name *Addressing.gz -delete > /dev/null 2>&1
find -name *RegionToRegionAddressing -delete > /dev/null 2>&1
find -name *RegionToRegionAddressing.gz -delete > /dev/null 2>&1


# Remove initial time folder
rm -rf 0

if [[ $1 != 'clean' ]]; then

    # Recreate initial time folder
    mkdir 0 || exit 1

    # Convert mesh from gmsh to foam
    mesh="fine" # coarse, fine, large_coarse, large_fine
    runApplication gmshToFoam "mesh_$mesh.msh" || exit 1

    # Scale mesh
    transformPoints -scale '(0.001 0.001 0.001)' > /dev/null || exit 1

    # Mirror mesh in y direction
    directions="y"
    for d in $directions; do

        cp "system/mirrorMeshDict.$d" \
            'system/mirrorMeshDict'

        runApplication -l "log.mirrorMesh.$d" mirrorMesh || exit 1

    done

    rm -rf 'constant/polyMesh'
    mv '0/polyMesh' 'constant'

    # Create new topoSets
    case "$mesh" in
    "coarse"|"fine")
        runApplication setSet -noVTK -batch 'system/setSetBatch.4mm' || exit 1
        ;;
    "large_coarse"|"large_fine")
        runApplication setSet -noVTK -batch 'system/setSetBatch.8mm' || exit 1
        ;;
    esac

    # Create new patches
    cp 'system/createPatchDict.1' 'system/createPatchDict'
    runApplication -l 'log.createPatchDict.1' createPatch -overwrite || exit 1

    # Make wedge mesh
    runApplication makeWedgeMesh -angle 5 || exit 1

    # Remove axis
    runApplication collapseEdges 1e-12 5 -overwrite || exit 1

    # Create new patches
    cp 'system/createPatchDict.2' 'system/createPatchDict'
    runApplication -l 'log.createPatchDict.2' createPatch -overwrite || exit 1

    # CheckMesh
    runApplication checkMesh -constant || exit 1

    # Restore faMesh from org backup
    cp -r 'constant/faMesh.org/'* 'constant/faMesh' > /dev/null 2>&1

    # Create faMesh
    runApplication makeFaMesh || exit 1

    # Copy all data from 0.org to initial time folder
    cp -r 0.org/* 0 || exit 1

    # Set fields
    runApplication funkySetFields -time 0 || exit 1
    runApplication funkySetBoundaryField -time 0 || exit 1

    case="bubble" # drop, bubble
    cp "constant/transportProperties.$case" 'constant/transportProperties'

    # Start solver
#     runApplication $application

fi

#./Allclean && ./Allrun && decomposePar -cellDist && makeRegionCellDecomposition -region region0_faSubMesh && decomposePar -region region0_faSubMesh && decomposeRegionAddressing -region region0_faSubMesh
